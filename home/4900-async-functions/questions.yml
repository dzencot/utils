---
questions:
  question-1:
    type: answers
    question: |
      Какой тип возвращает функция ниже?

      ```typescript
        const getHello = async () => {
          return 'hello';
        };
      ```
    answers:
      wrong:
      - |
        ```typescript
          Promise<any>
        ```
      - |
        ```typescript
          Promise
        ```
      correct:
      - |
        ```typescript
          Promise<string>
        ```

  question-2:
    type: answers
    question: Как обработать результат нескольких асинхронных функций?
    answers:
      wrong:
      - Создать для каждой асинхронной функции дополнительную async-функцию
      - Добавить setTimeout() и внутри него обработать результаты
      - Запустить функции в разных потоках
      correct:
      - Использовать метод Promise.all()

  question-3:
    type: filling
    question: |
      Дополните код:

    text: |

      ```typescript
        const getMessage = async () => {
          const promise = () => Promise.resolve()
            .then(() => {
              return 'hello';
            })
            %{answer}((data) => {
              return data.toUpperCase();
            });
          const result = await promise();

          console.log('result: ', result); // => 'HELLO'
        };
      ```

    answers:
      answer: ".then"

  question-4:
    type: answers
    question: |
      Есть ли ошибка и какая в коде ниже?

      ```typescript
        const getMessage = async () => {
          const promise = Promise.resolve()
            .then(() => {
              return 'hello';
            });
          const result = await promise;

          console.log('result: ', result); // => 'HELLO'
        };

        const sayHello = () => {
          const message = getMessage();

          console.log(message); // => 'HELLO'
        };
      ```

    answers:
      wrong:
        - Ошибки нет
        - |
          Не хватает груглых скобок чтобы вызывался промис: `await promise()`
        - |
          Внутри функции `sayHello()` нет доступа к функции `getMessage()` 
      correct:
        - |
          Функция `getMessage()` возвращает промис, поэтому в `message()` не будет строки
